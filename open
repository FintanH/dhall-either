let open
    :   ∀(a : Type)
      → ∀(b : Type) 
      → { Left  : ∀(Left : a) → ./Either a b
        , Right : ∀(Right : b) → ./Either a b
	, fold : ∀(c : Type) → (a → c) → (b → c) → ./Either a b → c
	-- BUG: fromLeft is defined as isLeft currently
	, fromRight : b → ./Either a b → b
	, isRight : ./Either a b → Bool
	, isLeft : ./Either a b → Bool
	, partition : List (./Either a b) → { lefts : List a, rights : List b }
	, mapRight : ∀(d : Type) → (b → d) → ./Either a b → ./Either a d
	, mapLeft : ∀(c : Type) → (a → c) → ./Either a b → ./Either c b
	, mapBoth : ∀(c : Type) → ∀(d : Type) → (a → c) → (b → d) → ./Either a b → ./Either c d
	, rights : List (./Either a b) → List b
	, lefts : List (./Either a b) → List a
        }
    =  λ(a : Type) 
     → λ(b : Type)
     → { Left  = λ(Left : a) → < Left = Left | Right : b >
       , Right = λ(Right : b) → < Right = Right | Left : a >
       , fold = λ(c : Type) → λ(f : a → c) → λ(g : b → c) → λ(e : ./Either a b) → ./fold a b c f g e
       , fromRight = λ(def : b) → λ(e : ./Either a b) → ./fromRight a b def e
       , isRight = λ(e : ./Either a b) → ./isRight a b e
       , isLeft = λ(e : ./Either a b) → ./isLeft a b e
       , partition = λ(eithers : List (./Either  a b)) -> ./partition a b eithers
       , mapRight = λ(d : Type) → λ(f : b → d) → λ(e : ./Either a b) → ./mapRight a b d f e
       , mapLeft = λ(c : Type) → λ(f : a → c) → λ(e : ./Either a b) → ./mapLeft a b c f e
       , mapBoth = λ(c : Type) → λ(d : Type) → λ(f : a → c) → λ(g : b → d) → λ(e : ./Either a b) → ./mapBoth a b c d f g e
       , rights = λ(eithers : List (./Either a b)) → ./rights a b eithers
       , lefts = λ(eithers : List (./Either a b)) → ./lefts a b eithers
       }
in open