
let mapLeft : ∀(a : Type) → ∀(b : Type) → ∀(c : Type) →
              (a → c) → ./Either a b → ./Either c b
    = λ(a : Type) → λ(b : Type) → λ(c : Type) →
      λ(f : a → c) → λ(e : ./Either a b) →
      let id = \(z : Type) -> \(x : z) -> x
      in ./mapBoth a b c b f (id b) e
in mapLeft
